/* 
 * Grid system
 * 
 * @package fegl
 */



/* 
 * GRID VARIABLES SETTING
 */ 

$max_width:                         1200px;
$max_width_large:                   1500px;
$cols:                              12 !default; 
$gutter:                            0 !default; 
$padding:                           0 !default; 

$mobile_first:                      true !default; 
$minimal_breakpoint:                320px !default; 
$medium_breakpoint:                 880px !default; 
$large_breakpoint:                  1040px !default; 
$wide_breakpoint:                   1550px !default; 


*, *:before, *:after {
    @include box-sizing();
}

.plain {
    display: block;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
}


// TEST
.wrapper,
.wrap {
  margin-left: auto;
  margin-right: auto;

  @include up-to(wide) {
      width: calc(100% - 40px);
  }
  @include up-to(medium) {
    width: 100%;
  }
  @include at-least(wide) {
      width: $max_width_large;
  }
  .paddinged-both {
    padding-right: 20px;
    padding-left: 20px;
  }
  [class*="col"] {
    padding-right: 20px;
    padding-left: 20px;
  }
}



.is-half {
    @include at-least(medium) {
      width: 50%;
      float: left;
  }
}

.pt_1 {
  padding-top: 1em;
}
.pb_1 {
  padding-bottom: 1em;
}
.pt_2 {
  padding-top: 2em;
}
.pb_2 {
  padding-bottom: 2em;
}
.pt_3 {
  padding-top: 3em;
}
.pb_3 {
  padding-bottom: 3em;
}








/*
 * UTILITY PADDING & BORDER CLASSES
 */

.paddinged-left {
  @include at-least(large) {
    padding-left: 20px;
  }
}
.paddinged-right {
  @include at-least(large) {
    padding-right: 20px;
  }
}

.paddinged-both {
  @extend .paddinged-right;
  @extend .paddinged-left;
}


@include at-least(large) {
    .bordered-left {
        border-left: 1px solid $gray_light;
    }
    .bordered-right {
        border-right: 1px solid $gray_light;
    }
    .bordered-both {
        @extend .bordered-right;
        @extend .bordered-left;
    }
}


.separator {
    height: 3em;
    * {
        height: inherit;
    }
}

%offset {

  @include at-least(medium) {
    position: absolute;
    display: block !important;
    content: '';
    background-color: inherit;
    top: 0;
    bottom: 0;
    width: 5000px;          
    height: 100%;
    z-index: -2;
  }
}
.offset-right {
  position: relative;

  &:after {
    @extend %offset;

    @include at-least(medium) {
      right: -5000px;
    }
  }
}
.offset-left {
  position: relative;
  
  &:before {
    @extend %offset;

    @include at-least(medium) {
      left: -5000px;
    }
  }      
}

.pin {
  z-index: 99;
}

.pinned:after {
  content: "";
  display: block;
  @extend .clearfix;
}

/* 
 * DON'T TOUCHE THIS !
 */

$one_col: (100% - ($gutter * ($cols - 1))) / $cols;

@mixin cols($num) {
    @include box-sizing();
    width: ($one_col * $num) + ($gutter * ($num - 1));
    float: left;
    position: relative;
}

@mixin sub_cols($num_child, $num_parent) {
    $parent_size: ($one_col * $num_parent) + ($gutter * ($num_parent - 1));
    $child_size: ($one_col * $num_child) + ($gutter * ($num_child - 1));
    width: ($child_size / $parent_size) * 100%;

}

@mixin parse-columns($suffix: ''){
    .row {
        @for $i from 1 through $cols {
            %#{$suffix}-#{$i}col,
            .#{$suffix}-#{$i}col{
                @include cols($i);

                .row {
                    @for $j from 1 through ($i - 1) {
                        %#{$suffix}-#{$j}col,
                        .#{$suffix}-#{$j}col {
                            @include sub_cols($j, $i);
                        }
                    }
                }   
            }
            

            %#{$suffix}-#{$i}col-push, .#{$suffix}-#{$i}col-push { left: $i / $cols * 100%; position: relative; right: auto; }
            %#{$suffix}-#{$i}col-pull, .#{$suffix}-#{$i}col-pull { right: $i / $cols * 100%; position: relative; left: auto; }
        }
        .#{$suffix}-clearfix { margin-left: 0 !important; clear: both; }
        %#{$suffix}-hide, .#{$suffix}-hide { display: none; }
        %#{$suffix}-show, .#{$suffix}-show { display: block; }
        %#{$suffix}-first, .#{$suffix}-first { margin-left: 0 !important; }
        %#{$suffix}-last, .#{$suffix}-last { float: right !important; }
    }
}

.row {
    @include clearfix;

    .row > [class*="col"]:first-child { 
      padding-left: 0 !important;
    }
    .row > [class*="col"]:last-child { 
      padding-right: 0 !important;
  }
    .is-centered {
      margin-left: auto !important;
      margin-right: auto !important;
      float: none !important;
    }

    &.fixe-it {
        position: fixed;
    }
}


/* 
 * GRID GENERATOR
 */

@if $mobile_first {
    @include at-least(minimal) {
        @include parse-columns('s');
    }
    @include at-least(medium) {
        @include parse-columns('m');
    }
    @include at-least(large) {
        @include parse-columns('l');
    }
    @include at-least(wide) {
        @include parse-columns('w');
    }
}
@else {
    @include parse-columns('w');

    @include up-to(wide) {
        @include parse-columns('l');
    }
    @include up-to(large) {
        @include parse-columns('m');
    }
    @include up-to(medium) {
        @include parse-columns('s');
    }
}
